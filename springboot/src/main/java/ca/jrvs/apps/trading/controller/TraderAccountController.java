package ca.jrvs.apps.trading.controller;

import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.domain.TraderAccountView;
import ca.jrvs.apps.trading.service.TraderAccountService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.Date;
import java.time.LocalDate;

@Api(value = "Trader", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
@Controller
@RequestMapping("/trader")
public class TraderAccountController {

    private TraderAccountService traderAccountService;

    @Autowired
    public TraderAccountController(TraderAccountService traderAccountService){
        this.traderAccountService = traderAccountService;
    }

    @ApiOperation(
            value = "Create a trader and an account.",
            notes = "TraderID and AccountID are auto-generated by the database, and they should be identical. Assume each trader has precisely one account.")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    @PostMapping(
            path = "/firstName/{firstName}/lastName/{lastName}/dateOfBirth/{dateOfBirth}/country/{country}/email/{email}",
            produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    public TraderAccountView createTrader(
            @PathVariable String firstName,
            @PathVariable String lastName,
            @PathVariable @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate dateOfBirth,
            @PathVariable String country,
            @PathVariable String email){

        try{
            Trader trader = new Trader();
            trader.setFirstName(firstName);
            trader.setLastName(lastName);
            trader.setDateOfBirth(Date.valueOf(dateOfBirth));
            trader.setCountry(country);
            trader.setEmail(email);
            return traderAccountService.createTraderAndAccount(trader);
        } catch (Exception e){
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

    @ApiOperation(
            value = "Delete a trader.",
            notes = "Delete a trader if and only if its account is zero and has no open positions. Also deletes the associated account and security orders.")
    @ApiResponses(
            value = {@ApiResponse(code = 400, message = "Unable to delete user.")})
    @DeleteMapping(path = "/traderID/{traderID}")
    @ResponseStatus(HttpStatus.OK)
    public void deleteTrader(@PathVariable Integer traderID){

        try{
            traderAccountService.deleteTraderByID(traderID);
        } catch (Exception e){
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }

    }

    @ApiOperation(
            value = "Deposit funds.",
            notes = "Deposit a fund to the account that is associated with the given trader ID.")
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Trader ID is not found."),
            @ApiResponse(code = 400, message = "Unable to deposit due to user input.")})
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @PutMapping(path = "/deposit/traderID/{traderID}/amount/{amount}")
    public Account depositFund(@PathVariable Integer traderID, @PathVariable Double amount){
        try{
            return traderAccountService.deposit(traderID, amount);
        } catch (Exception e){
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

    @ApiOperation(
            value = "Withdraw funds.",
            notes = "Withdraw funds from the account that is associated with the given trader ID.")
    @ApiResponses(value = {
            @ApiResponse(code = 404, message = "Trader ID is not found."),
            @ApiResponse(code = 400, message = "Unable to withdraw due to user input.")})
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @PutMapping(path = "/withdraw/traderID/{traderID}/amount/{amount}")
    public Account withdrawFund(@PathVariable Integer traderID, @PathVariable Double amount){
        try{
            return traderAccountService.withdraw(traderID, amount);
        } catch (Exception e){
            throw ResponseExceptionUtil.getResponseStatusException(e);
        }
    }

}
